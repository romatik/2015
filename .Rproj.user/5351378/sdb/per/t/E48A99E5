{
    "contents" : "library(reshape2)\nlibrary(dplyr)\nlibrary(stringr)\n\n\n#### auxilary function to read in csv files. Since SurveyMonkey separates the name of the column on two lines I need to read it in\n#### this way. Two lines are divided by \"_\" to make it easier to extract it later.\nreadingcsv <- function(pathtofile){\n  header <- read.csv(pathtofile, nrows = 1)\n  header2 <- scan(pathtofile, skip = 1, nlines = 1, what = character(), sep = \",\")\n  data <- read.csv(pathtofile, na.strings = c(\" \", \"\"), skip = 2, header = FALSE)\n  names(data) <- paste(colnames(header), header2, sep = \"_\")\n  colnames(data) <- make.names(colnames(data))\n  return (data)\n}\n\n##### reading in lists one by one. All of the lists contain duplicate information about ID and such. Deleting from all to later combine\n##### them without issues\nlist1 <- readingcsv(\"../Media/2015/CSV/Sheet_1.csv\")\nlist2 <- readingcsv(\"../Media/2015/CSV/Sheet_2.csv\")\nnamesdrop <- list2 %>%\n  select(starts_with(\"Email.Address_\"), \n         starts_with(\"First.Name_\"), \n         starts_with(\"Lastname_\"), \n         starts_with(\"Custom.Data_\"),\n         starts_with(\"StartDate_\"),\n         starts_with(\"EndDate_\"),\n         starts_with(\"IP.Address_\"),\n         starts_with(\"CollectorID_\")) %>%\n  colnames()\nlist2 <- list2[, !(names(list2) %in% namesdrop)]\n\nlist3 <- readingcsv(\"../Media/2015/CSV/Sheet_3.csv\")\nnamesdrop <- list3 %>%\n  select(starts_with(\"Email.Address_\"), \n         starts_with(\"First.Name_\"), \n         starts_with(\"Lastname_\"), \n         starts_with(\"Custom.Data_\"),\n         starts_with(\"StartDate_\"),\n         starts_with(\"EndDate_\"),\n         starts_with(\"IP.Address_\"),\n         starts_with(\"CollectorID_\")) %>%\n  colnames()\nlist3 <- list3[, !(names(list3) %in% namesdrop)]\n\nlist4 <- readingcsv(\"../Media/2015/CSV/Sheet_4.csv\")\nnamesdrop <- list4 %>%\n  select(starts_with(\"Email.Address_\"), \n         starts_with(\"First.Name_\"), \n         starts_with(\"Lastname_\"), \n         starts_with(\"Custom.Data_\"),\n         starts_with(\"StartDate_\"),\n         starts_with(\"EndDate_\"),\n         starts_with(\"IP.Address_\"),\n         starts_with(\"CollectorID_\")) %>%\n  colnames()\nlist4 <- list4[, !(names(list4) %in% namesdrop)]\n\nlist5 <- readingcsv(\"../Media/2015/CSV/Sheet_5.csv\")\nnamesdrop <- list5 %>%\n  select(starts_with(\"Email.Address_\"), \n         starts_with(\"First.Name_\"), \n         starts_with(\"Lastname_\"), \n         starts_with(\"Custom.Data_\"),\n         starts_with(\"StartDate_\"),\n         starts_with(\"EndDate_\"),\n         starts_with(\"IP.Address_\"),\n         starts_with(\"CollectorID_\")) %>%\n  colnames()\nlist5 <- list5[, !(names(list5) %in% namesdrop)]\n\n##### inner joining all lists by RespondentID\nbigtable <- inner_join(list1, list2, by = \"RespondentID_\")\nbigtable <- inner_join(bigtable, list3, by = \"RespondentID_\")\nbigtable <- inner_join(bigtable, list4, by = \"RespondentID_\")\nbigtable <- inner_join(bigtable, list5, by = \"RespondentID_\")\n\n##### processing the columns with Universities. Since we had complicated logic, SurveyMonkey recorder each logic step in separate\n##### columns. It makes it complicated.\nbigtable_processed <- bigtable %>% \n  select(RespondentID_, starts_with(\"University.\"), starts_with(\"A.3..\")) %>%\n  melt(id = \"RespondentID_\", na.rm = TRUE)  \n\nbigtable_processed$variable <- gsub(\"(University.\\\\d{1}).+\\\\d{0,1}$\", \"\\\\1\", bigtable_processed$variable)  \nbigtable_processed$variable <- str_sub(bigtable_processed$variable, start = -12)\nbigtable_processed <- reshape(bigtable_processed, direction = \"wide\", idvar = \"RespondentID_\", timevar = \"variable\")\n\n\n##### Deleting extra columns from the table\nnamesdrop <- bigtable %>%\n  select(starts_with(\"University.\"), \n         starts_with(\"A.3..\")) %>%\n  colnames()\nbigtable <- bigtable[, !(names(bigtable) %in% namesdrop)]\nbigtable <- inner_join(bigtable, bigtable_processed, by = \"RespondentID_\")\n\n##### function to extract information from an IP address of a respondent. Possibly will only use it for visualizations and such\n##### Result of a function is stored in ip.csv.\n# freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))\n# {\n#   if (1 == length(ip))\n#   {\n#     # a single IP address\n#     require(rjson)\n#     url <- paste(c(\"http://freegeoip.net/json/\", ip), collapse='')\n#     ret <- fromJSON(readLines(url, warn=FALSE))\n#     if (format == 'dataframe')\n#       ret <- data.frame(t(unlist(ret)))\n#     return(ret)\n#   } else {\n#     ret <- data.frame()\n#     for (i in 1:length(ip))\n#     {\n#       r <- freegeoip(ip[i], format=\"dataframe\")\n#       ret <- rbind(ret, r)\n#     }\n#     return(ret)\n#   }\n# }   \n# #ip <- freegeoip(as.character(bigtable$IP.Address_))\n# ip_addresses <- as.data.frame(ip)\n# bigtable <- inner_join(bigtable, ip_addresses, by = c(\"IP.Address_\" = \"ip\"))\n# write.csv(x = ip, file = \"ip.csv\")\n\n\n###### just a crutch to rename the columns in a way that will make it possible to analyze it later. SurveyMonkey didn't append\n###### the names of each column with a corresponding question. \n# for (i in 152:713){\n#   if(!(gsub(pattern = \"(^.)+.*\", replacement = \"\\\\1\", colnames(bigtable)[i]) == \"X\")){\n#     start_of_the_line <- gsub(pattern = \"(^.*_)+.*\", replacement = \"\\\\1\", colnames(bigtable)[i])\n#   }\n#   else {\n#     colnames(bigtable)[i] <- paste0(start_of_the_line, gsub(pattern = \"(^.*_)+(.*)\", replacement = \"\\\\2\", colnames(bigtable)[i]))\n#   }\n# }\n##### created backup bigtable.csv at this point\n#bigtable$X <- NULL\n\n##### deleting empty columns E-mail... \nnamesdrop <- bigtable %>%\n  select(starts_with(\"Email.Address_\"), \n         starts_with(\"First.Name_\"), \n         starts_with(\"Lastname_\"), \n         starts_with(\"Custom.Data_\")) %>%\n  colnames()\nbigtable <- bigtable[, !(names(bigtable) %in% namesdrop)]\n\n##### turning columns with dates in appropriate format\nbigtable$StartDate_ <- as.POSIXct(bigtable$StartDate_, format = \"%m/%d/%Y %H:%M:%S\")\nbigtable$EndDate_ <- as.POSIXct(bigtable$EndDate_, format = \"%m/%d/%Y %H:%M:%S\")\n\n##### cleaning up the \"other (please specify)\" answer\nuniversity_other <- bigtable[,9:127]\nnamesdrop <- colnames(university_other)\nuniversity_other <- cbind(university_other, bigtable$RespondentID_)\nuniversity_other <- melt(university_other, id = \"bigtable$RespondentID_\", na.rm = TRUE)\nuniversity_other$variable <- \"University_other\"\nuniversity_other <- reshape(university_other, direction = \"wide\", idvar = \"bigtable$RespondentID_\", timevar = \"variable\")\nrownames(university_other) <- NULL\n\nbigtable_temp <- left_join(x = bigtable, y = university_other, by = c(\"RespondentID_\" = \"bigtable$RespondentID_\"))\nbigtable <- bigtable_temp\nbigtable <- bigtable[, !(names(bigtable) %in% namesdrop)]\n\nto_comb <- bigtable %>%\n  select(RespondentID_, X_Other..please.specify..x, \n         value.University_other, value.University.1,value.University.2,value.University.3, value.University.4)\nbigtable$X <- NULL\n\n#### the data from combed database is transferred into the main table\nbigtable_temp <- left_join(x = bigtable, y = combed, by = \"RespondentID_\")\n\ncompare <- bigtable_temp %>%\n  select(RespondentID_, A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response, Program_other)\ncompare$Program_other <- as.character(compare$Program_other)\ncompare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response <- as.character(compare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response)\n\n#### rewritting the answers from \"Other...\" column into the main column with other courses.\nfor (i in 1:length(compare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response)){\n  if (is.na(compare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response[i])){\n    compare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response[i] <- compare$Program_other[i]}\n}\ncompare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response <- as.factor(compare$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response)\ncompare$Program_other <- NULL\nbigtable_temp <- left_join(x = bigtable_temp, y = compare, by = \"RespondentID_\")\nbigtable_temp$A.2..Select.the.name.of.your.Erasmus.Mundus.master.course._Response.x <- NULL\nbigtable <- bigtable_temp\nbigtable$Program_other <- NULL\n\n### written the table out on 20150802\nwrite.csv(x = colnames(bigtable), file = \"columnnames.csv\")\n\n### deleting duplicates based on a unique identifier created by the person in A.1 question. Only the latest record is kept\nduplicated(bigtable$A.1..Please.create.a.unique.identification.code..Just.type.in.your.birthday.in.the.format.DD.MO.YY.and.the.first.two.letters.of.your.first.name.followed.by.the.first.two.letters.of.your.first.name.and.first.two.letter.of.your.last.name..For.example..Maris.Miller.was.born.on.October.9..1975..So.her.code.would.be.091075MAMI._Open.Ended.Response)\nto_delete <- c(4003978291, 4003914308, 4002127235, 4004768338, 4002327575, 4008453547, 4005483888)\nbigtable <- bigtable[!(bigtable$RespondentID_ %in% to_delete),]\nwrite.csv(x = bigtable, file = \"bigtable.csv\")\n\n\n### working with questions about each individual universities. Deleting multiple columns corresponding to various situations that students\n### chose. For example, columns F correspond to situation when student chose to evaluate only one university, G - 2, H - 3, and I - 4.\n### Therefore, there are multiple columns corresponding to the same information that needs to be merged.\ncolumnnames <- read.csv(\"C:/Users/Misha/Downloads/columnnames.csv\", stringsAsFactors = FALSE)\nbigtable <- read.csv(\"../Media/2015/Master_tables/20150802_bigtable_archive.csv\")\nbigtable$X <- NULL\nbigtable_temp <- bigtable\ncolnames(bigtable_temp) <- columnnames$Name.of.the.column\nnames_to_drop <- bigtable_temp %>%\n  select(RespondentID_,\n         starts_with(\"F.\"),\n         starts_with(\"G.\"),\n         starts_with(\"H.\"),\n         starts_with(\"I.\")) \n\nnames_to_drop$I.am.currently._Response <- NULL\nnames_to_drop$I.am.currently._Other.please.specify. <- NULL\nnames_ <- colnames(names_to_drop)\n\nnames_to_drop <- melt(names_to_drop, id = \"RespondentID_\", na.rm = TRUE)  \nnames_to_drop$variable <- substring(names_to_drop$variable, 3)\nnames_to_drop <- reshape(names_to_drop, direction = \"wide\", idvar = \"RespondentID_\", timevar = \"variable\")\n\nwrite.csv(x = names_to_drop, file = \"questions_individ.csv\")\n\nbigtable_temp <- left_join(x = bigtable_temp, y = names_to_drop, by = \"RespondentID_\")\nbigtable_temp <- bigtable_temp[, !(names(bigtable_temp) %in% names_[2:length(names_)])]\nwrite.csv(x = bigtable_temp, file = \"bigtable_temp.csv\")\n\nbigtable <- bigtable_temp\nwrite.csv(x = bigtable, file = \"bigtable.csv\")\n#written out the table on 6th of Aubust\n\nwrite.csv(x = colnames(bigtable), file = \"colnames.csv\")\n",
    "created" : 1438520864501.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3739719181",
    "id" : "E48A99E5",
    "lastKnownWriteTime" : 1438855954,
    "path" : "C:/Users/Misha/Dropbox/Projects/EM Internship/Quantitative team/2015/data_preprocessing.R",
    "project_path" : "data_preprocessing.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}