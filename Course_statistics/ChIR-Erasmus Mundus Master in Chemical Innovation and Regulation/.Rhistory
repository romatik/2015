colnames(tenormore) <- c("Course", "Respondents")
View(tenormore)
overall <- select(dataset,
RespondentID_,
starts_with("A."),
starts_with("X."),
starts_with("B."),
starts_with("C."),
starts_with("L."),
I.am.currently._Response)
dataset <- dataset[(dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. %in% tenormore$Course),]
dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[1],]
z <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[1],]
seq(1,10)
getwd()
mainDir <- "C:/Users/Misha/Dropbox/Projects/EM Internship/Quantitative team/2015/Course_statistics"
for (i in seq(1,10)){
setwd(file.path(mainDir))
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
subdir <- as.character(tenormore$Course[i])
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
for (i in seq(1,10)){
setwd(file.path(mainDir))
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
subDir <- as.character(tenormore$Course[i])
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1', 'L.3.a', 'L.2.a', "L.4", "L.5", "L.6")
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
question[,i] <- factor(question[,i], levels = levels)
}
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl, plot.percents = TRUE, plot.percent.low = FALSE, plot.percent.high = FALSE,
centered = FALSE, text.size = 1.5, wrap = 70, legend.position = "top") +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 7),
plot.margin = unit(c(0, 0.3, 0.3, 0), "lines"),
legend.margin = unit(0, "lines"),
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"),
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) +
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) +
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = 70)
}
for (i in seq(1,10)){
setwd(file.path(mainDir))
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
subDir <- as.character(tenormore$Course[i])
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
for (i in seq(1,10)){
setwd(file.path(mainDir))
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
subDir <- as.character(tenormore$Course[i])
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
library(dplyr)
library(likert)
library(scales)
library(psych)
library(reshape)
?unit
library(grid)
for (i in seq(1,10)){
setwd(file.path(mainDir))
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
subDir <- as.character(tenormore$Course[i])
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
warnings()
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1') #, 'L.3.a', 'L.2.a', "L.4", "L.5", "L.6")
for (i in seq(1,10)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
warnings()
dim(z)
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1', "L.4", "L.5", "L.6") #, 'L.3.a', 'L.2.a',
for (i in seq(1,10)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
colSums(!is.na(z))
dim(z)
dim(z)[2]
for(i in seq_along(z)) {
### this step will also reduce all other answers to NA's
z[,i] <- factor(z[,i], levels = levels)
### checking to see to have more than 10 answers in each column, otherwise delete it
if(sum(!is.na(z[,i])) < 10)
z[,i] <- NULL
}
for(i in seq_along(z)) {
### this step will also reduce all other answers to NA's
z[,i] <- factor(z[,i], levels = likert_levels)
### checking to see to have more than 10 answers in each column, otherwise delete it
if(sum(!is.na(z[,i])) < 10)
z[,i] <- NULL
}
for(i in seq_along(z)) {
### this step will also reduce all other answers to NA's
z[,i] <- factor(z[,i], levels = likert_levels)
}
?colSums
question[, colSums(!is.na(question)) > 10]
z[, colSums(!is.na(z)) > 10]
z <- z[, colSums(!is.na(z)) > 10]
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
### this step will also reduce all other answers to NA's
question[,i] <- factor(question[,i], levels = levels)
}
### checking to see to have more than 10 answers in each column, otherwise delete it
question <- question[, question(!is.na(z)) > 10]
### checking to see if question has more than 1 dimension with 10 or more respondents to proceed.
### Otherwise it doesn't make sense to calculate Cronbach's alpha and plot
if (dim(question)[2] > 1) {
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl, plot.percents = TRUE, plot.percent.low = FALSE, plot.percent.high = FALSE,
centered = FALSE, text.size = 1.5, wrap = 70, legend.position = "top") +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 7),
plot.margin = unit(c(0, 0.3, 0.3, 0), "lines"),
legend.margin = unit(0, "lines"),
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"),
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) +
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) +
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = 70)
}
}
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1', "L.4", "L.5", "L.6") #, 'L.3.a', 'L.2.a',
mainDir <- "C:/Users/Misha/Dropbox/Projects/EM Internship/Quantitative team/2015/Course_statistics"
for (i in seq(1,10)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
### this step will also reduce all other answers to NA's
question[,i] <- factor(question[,i], levels = levels)
}
### checking to see to have more than 10 answers in each column, otherwise delete it
question <- question[, colSums(!is.na(question)) > 10]
### checking to see if question has more than 1 dimension with 10 or more respondents to proceed.
### Otherwise it doesn't make sense to calculate Cronbach's alpha and plot
if (dim(question)[2] > 1) {
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl, plot.percents = TRUE, plot.percent.low = FALSE, plot.percent.high = FALSE,
centered = FALSE, text.size = 1.5, wrap = 70, legend.position = "top") +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 7),
plot.margin = unit(c(0, 0.3, 0.3, 0), "lines"),
legend.margin = unit(0, "lines"),
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"),
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) +
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) +
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = 70)
}
}
for (i in seq(1,10)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
colSums(!is.na(z))
View(overall)
z <- z[, colSums(!is.na(z)) > 20]
z
View(z)
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
### this step will also reduce all other answers to NA's
question[,i] <- factor(question[,i], levels = levels)
}
### checking to see to have more than 10 answers in each column, otherwise delete it
question <- question[, colSums(!is.na(question)) > 10]
### checking to see if question has more than 1 dimension with 10 or more respondents to proceed.
### Otherwise it doesn't make sense to calculate Cronbach's alpha and plot
if (dim(question)[2] > 1) {
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl, plot.percents = TRUE, plot.percent.low = FALSE, plot.percent.high = FALSE,
centered = FALSE, text.size = 1.5, wrap = 50, legend.position = "top") +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 7),
plot.margin = unit(c(0, 0.3, 0.3, 0), "lines"),
legend.margin = unit(0, "lines"),
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"),
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) +
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) +
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = 70)
}
}
for (i in seq(1,5)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
### this step will also reduce all other answers to NA's
question[,i] <- factor(question[,i], levels = levels)
}
### checking to see to have more than 10 answers in each column, otherwise delete it
question <- question[, colSums(!is.na(question)) > 10]
### checking to see if question has more than 1 dimension with 10 or more respondents to proceed.
### Otherwise it doesn't make sense to calculate Cronbach's alpha and plot
if (dim(question)[2] > 1) {
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl, plot.percents = TRUE, plot.percent.low = FALSE, plot.percent.high = FALSE,
centered = FALSE, text.size = 1.5, wrap = 50, legend.position = "top") +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 7),
plot.margin = unit(c(0, 0.3, 0.3, 0), "lines"),
legend.margin = unit(0, "lines"),
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"),
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) +
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) +
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = (25 + dim(question)[2]*8))
}
}
for (i in seq(1,5)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
for (i in seq(1,5)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
warnings
warnings()
?plot.margin
?theme
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1', "L.4", "L.5", "L.6", 'L.3.a', 'L.2.a')
questionprint <- function(x, dataset = overall){
question <- dataset[, substr(names(dataset), 1, nchar(x)) == x]
colnames(question) <- gsub("\\.", " ", colnames(question)) #making names of questions readable
name_of_the_question <- gsub("(.*)_(.*)", "\\1", colnames(question)[1]) #storing the name of the section for title of the plot
name_of_the_question <- substring(name_of_the_question, nchar(x)+1)
colnames(question) <- gsub("(.*?)_(.*)", "\\2", colnames(question)) #leaving just the dimension name
levels = likert_levels # default is likert_levels
if (x == "L.6" || x == "L.5" || x == "L.4")
levels = agree_levels # using agree levels only for relevant questions
### making sure that levels go in order they were meant to go
for(i in seq_along(question)) {
### this step will also reduce all other answers to NA's
question[,i] <- factor(question[,i], levels = levels)
}
### checking to see to have more than 10 answers in each column, otherwise delete it
question <- question[, colSums(!is.na(question)) > 10]
### checking to see if question has more than 1 dimension with 10 or more respondents to proceed.
### Otherwise it doesn't make sense to calculate Cronbach's alpha and plot
if (dim(question)[2] > 1) {
### calculating Cronbach's alpha
if (sum(complete.cases(question)) > 0){ # calculating Cronbach's alpha only for cases where complete cases exist
question_alpha <- psych::alpha(data.matrix(question))
question_alpha_head <- xtable(question_alpha$total, caption = sprintf("Statistics for %s question", x))
print.xtable(question_alpha_head, type = "html", file = sprintf("./Question_statistics/%s_alpha.html", x))
question_alpha_drop <- xtable(question_alpha$alpha.drop, caption = sprintf("What if each individual dimension is dropped for %s question", x))
print.xtable(question_alpha_drop, type = "html", file = sprintf("./Question_statistics/%s_drop.html", x))
question_alpha_stats <- xtable(question_alpha$item.stats, caption = sprintf("Summary statistics for %s question", x))
print.xtable(question_alpha_stats, type = "html", file = sprintf("./Question_statistics/%s_stats.html", x))
}
### creating likert-type variable to print it out
questionl <- likert(question) #creating likert-type variable for plotting
wrap_function <- wrap_format(130) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
### printing out the file
p <- plot(questionl,
plot.percents = TRUE, # displaying percents for each answer
plot.percent.low = FALSE,  # displaying cummulative percents for negative answers
plot.percent.high = FALSE, # displaying cummulative percents for positive answers
centered = FALSE, # stretcthing the bar from left to right
text.size = 1.5,
wrap = 50, # wrap statement for dimension names
legend.position = "top") +
ggtitle(name_of_the_question) + # title of the question
theme(text = element_text(size = 7), # setting the text size of the plot
plot.margin = unit(c(0, 0.8, 0.3, 0), "lines"), # decreasing white space around the plot
legend.margin = unit(0, "lines"), # deleting space around legend
#          plot.title = element_text(vjust = 0, hjust = 3 ),
legend.key.size = unit(0.5, "lines"), # decreasing size of legend elements
legend.background = element_rect(colour = "gray", fill = NA, size = 0.1)) + # adding a frame around the legend
geom_hline(yintercept=seq(25, 75, by=25), linetype = "dashed", size = 0.2) + # adding dashed lines at 25, 50, 75% to make it more clear
coord_flip(ylim = c(-1,101))
ggsave(filename = sprintf("./Question_statistics/%s.png", x), plot = p, units = "mm", width = 180, height = (25 + dim(question)[2]*8))
}
}
for (i in seq(1,5)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- as.character(tenormore$Course[i])
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
