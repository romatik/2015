means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = cut(value, breaks = seq(1, 4, by = 0.5), right = FALSE))) +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1, aes(fill = cut(value, breaks = seq(1, 4, by = 0.5), right = FALSE)))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
scale_fill_brewer(type="seq",palette = "YlGn") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1, aes(fill = cut(value, breaks = seq(1, 4, by = 0.5), right = FALSE)))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1, aes(fill = cut(value, breaks = seq(1, 4, by = 0.5), right = FALSE)))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1, aes(fill = cut(value, breaks = seq(1, 4, by = 0.5), right = FALSE)))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
for (i in seq_along(tenormore$Course)){
setwd(file.path(mainDir)) # setting the directory
#subsetting to relevant course
course_dataset <- dataset[dataset$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. == tenormore$Course[i],]
#storing the name of the course as a character
subDir <- make.names(as.character(tenormore$Course[i]))
#reating a directory for a course
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
setwd(file.path(mainDir, subDir))
#creating a directory for questions statistics
ifelse(!dir.exists("./Question_statistics/"), dir.create(file.path("./Question_statistics/")), FALSE)
for (i  in seq_along(questions))
questionprint(questions[i], dataset = course_dataset)
}
overall <- overall[(overall$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. %in% tenormore$Course),]
### creating heatmaps for means of every question and every course
setwd("C:/Users/Misha/Dropbox/Projects/EM Internship/Quantitative team/2015")
# http://stackoverflow.com/questions/32136304/conditional-calculation-of-mean
f1 <- function(x) if(sum(!is.na(x))>11) mean(as.numeric(x), na.rm=TRUE) else NA_real_
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, c(1,1.5,2.0, 2.5,3,3.5,4)))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, c(1,1.5,2.0, 2.5,3,3.5,4), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_gradient(low = "red", high = "green", limits = c(1,4)) + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, c(1,1.5,2.0, 2.5,3,3.5,4), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_gradient() + #, limits = c(1,4)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, c(1,1.5,2.0, 2.5,3,3.5,4), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
?cut
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn", limits = c(1,4))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
seq(1,4, by = 0.5)
cut(means_matrix, seq(1,4, by = 0.5), right = FALSE)
cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_brewer(type="seq",palette = "YlGn")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
View(means_matrix)
?brewer.pal
mycolors <- brewer.pal(length(seq(1,4, by = 0.5)), "RdYlGn")
library(RColorBrewer)
mycolors <- brewer.pal(length(seq(1,4, by = 0.5)), "RdYlGn")
mycolors
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)), values = mycolors) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)), values = mycolors, breaks = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
)
end
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)),
values = mycolors,
breaks = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5)))) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)),
values = mycolors,
drop = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggplot(means_matrix_melted, aes(x = X2, y = X1, fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
ggtitle(as.character(questions[i])) +
geom_tile() +
scale_fill_manual(drop = FALSE) +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)),
values = mycolors,
drop = FALSE)
ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
geom_tile(aes(fill = cut(value, seq(1,4, by = 0.5), right = FALSE))) +
scale_fill_manual(drop = FALSE) +
scale_colour_manual(name = levels(cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)),
values = mycolors,
drop = FALSE)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
means_matrix_melted$value1
ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(value1),
values = mycolors,
drop = FALSE)
View(means_matrix_melted)
ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
drop = FALSE)
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
drop = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
mycolors <- brewer.pal(length(seq(1,4, by = 0.5)), "BrBG")
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#mean_matrix <- data.matrix(mean)
means_matrix <- data.matrix(means) # can be scaled
means_matrix_melted <- melt(means_matrix)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
drop = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
mycolors <- brewer.pal(c(-Inf,-2:2,Inf), "BrBG")
c(-Inf,-2:2,Inf)
mycolors <- brewer.pal(length(c(-Inf,-2:2,Inf)), "BrBG")
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
#means_matrix <- data.matrix(means)
means_matrix <- scale(data.matrix(means))
means_matrix_melted <- melt(means_matrix)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, c(-Inf,-2:2,Inf), right = FALSE)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
drop = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave(filename = sprintf("./Heatmaps_scaled/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
mycolors <- brewer.pal(length(c(-Inf,-2:2,Inf)), "BrBG")
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
### scaling/not scaling
#  means_matrix <- data.matrix(means)
means_matrix <- scale(data.matrix(means))
means_matrix_melted <- melt(means_matrix)
### different ways to cut values depending if scaled/not scaled
#  means_matrix_melted$value1 <- cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, c(-Inf,-2:2,Inf), right = FALSE)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
na.value = "black",
drop = FALSE) + # not dropping levels with 0
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
#  ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
ggsave(filename = sprintf("./Heatmaps_scaled/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
f1 <- function(x) if(sum(!is.na(x))>9) mean(as.numeric(x), na.rm=TRUE) else NA_real_
for (i in seq_along(questions)){
#calculating means for the given question
means <- overall %>%
select(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.,
starts_with(questions[i])) %>%
group_by(A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.) %>%
summarise_each(funs(f1))
#storing the names of the courses for future use
rownames_store <- means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response.
means$A.2.Select.the.name.of.Erasmus.Mundus.master.course._Response. <- NULL
#logical vector to find out rows with all NA's
vector <- !!rowSums(!is.na(means))
means <- means[vector,] #deleting the rows with all NA's
rownames(means) <- rownames_store[vector] #writing down the names of the courses
colnames(means) <- gsub("\\.", " ", colnames(means)) #making names of questions readable
colnames(means) <- gsub("(.*?)_(.*)", "\\2", colnames(means)) #leaving just the dimension name
wrap_function_x <- wrap_format(35)
colnames(means) <- wrap_function_x(colnames(means))
wrap_function_y <- wrap_format(50)
rownames(means) <- wrap_function_y(rownames(means))
#creating the matrix for printing it out in ggplot
### scaling/not scaling
#  means_matrix <- data.matrix(means)
means_matrix <- scale(data.matrix(means))
means_matrix_melted <- melt(means_matrix)
### different ways to cut values depending if scaled/not scaled
#  means_matrix_melted$value1 <- cut(means_matrix_melted$value, seq(1,4, by = 0.5), right = FALSE)
means_matrix_melted$value1 <- cut(means_matrix_melted$value, c(-Inf,-2:2,Inf), right = FALSE)
#plotting the heatmap
p <- ggplot(means_matrix_melted, aes(x = X2, y = X1)) +
ggtitle(as.character(questions[i])) +
geom_tile(aes(fill = value1)) +
scale_fill_manual(name = levels(means_matrix_melted$value1),
values = mycolors,
na.value = "black",
drop = FALSE) + # not dropping levels with 0
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
#  ggsave(filename = sprintf("./Heatmaps/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
ggsave(filename = sprintf("./Heatmaps_scaled/%s.png", questions[i]), plot = p, units = "mm", width = 250, height = (70 + sum(vector)*4))
}
