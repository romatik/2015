coord_flip() +
ylab("Distribution of means") +
#http://stackoverflow.com/questions/21878974/auto-wrapping-of-labels-via-labeller-label-wrap-in-ggplot2
scale_x_discrete(labels = function(x) wrap_function_label(x))+
theme(axis.title.y=element_blank())
#saving the resulting graph
#ggsave(filename = sprintf("./Mean_plots/%s.png", x), plot = p, units = "mm", width = 250, height = (70 + length(levels(factor(melted_means$X2)))*10))
return(p)
}
means_printing("B.1.1")
means_printing_plotly("B.1.1")
library(plotly)
library(plotly)
means_printing_plotly("B.1.1")
logo_color <- '#004E86'
background_color <- '#ABDCD6'
accent1 <- '#763A7A'
accent2 <- '#F1684E'
background_text <- '#F6F3EC'
means_printing_plotly("B.1.1")
means_printing <- function(x){
### function to print out a boxplot for any given question. Used in conjuction with means_prepare.
# getting the means table for a given question
means <- means_prepare(x)[[1]]
# melting the means table to use it in plotting
melted_means <- as.data.frame(reshape2::melt(as.matrix(means)))
#getting name of the question
name_of_the_question <- extract_name(x)
#wrap statement to have new lines after a given character
wrap_function_title <- wrap_format(80)
name_of_the_question <- wrap_function_title(name_of_the_question)
#same for dimension names
wrap_function_label <- wrap_format(40)
#plotting
p <- ggplot(melted_means, aes(y = value, x = Var2)) +
ggtitle(name_of_the_question) +
geom_boxplot() +
coord_flip() +
ylab("Distribution of means") +
#http://stackoverflow.com/questions/21878974/auto-wrapping-of-labels-via-labeller-label-wrap-in-ggplot2
scale_x_discrete(labels = function(x) wrap_function_label(x))+
theme(axis.title.y=element_blank())
#saving the resulting graph
#ggsave(filename = sprintf("./Mean_plots/%s.png", x), plot = p, units = "mm", width = 250, height = (70 + length(levels(factor(melted_means$X2)))*10))
return(p)
}
means_printing_plotly("B.1.1")
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
logo_color <- '#004E86'
background_color <- '#ABDCD6'
accent1 <- '#763A7A'
accent2 <- '#F1684E'
background_text <- '#F6F3EC'
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
ggtitle(name_of_the_question)
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 14, family = "Open Sans"))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 14, family = "Open Sans"),
plot.title = element_text(size = 14))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 14, family = "Open Sans"),
plot.title = element_text(size = 12))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
ggtitle(name_of_the_question) +
theme(text = element_text(size = 14, family = "Open Sans"),
plot.title = element_text(size = 13))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
#    ggtitle(name_of_the_question) +
theme(text = element_text(size = 14, family = "Open Sans"),
plot.title = element_text(size = 13))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
#    ggtitle(name_of_the_question) +
theme(text = element_text(size = 12, family = "Open Sans"),
plot.title = element_text(size = 13))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
logo_color <- '#004E86'
background_color <- '#ABDCD6'
accent1 <- '#763A7A'
accent2 <- '#F1684E'
background_text <- '#F6F3EC'
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
#    ggtitle(name_of_the_question) +
theme(text = element_text(size = 12, family = "Helvetica Neue"),
plot.title = element_text(size = 13))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
means_printing <- function(x){
### function to print out a boxplot for any given question. Used in conjuction with means_prepare.
# getting the means table for a given question
means <- means_prepare(x)[[1]]
# melting the means table to use it in plotting
melted_means <- as.data.frame(reshape2::melt(as.matrix(means)))
#getting name of the question
name_of_the_question <- extract_name(x)
#wrap statement to have new lines after a given character
wrap_function_title <- wrap_format(80)
name_of_the_question <- wrap_function_title(name_of_the_question)
#same for dimension names
wrap_function_label <- wrap_format(40)
#plotting
p <- ggplot(melted_means, aes(y = value, x = Var2)) +
ggtitle(name_of_the_question) +
geom_boxplot() +
coord_flip() +
ylab("Distribution of means") +
#http://stackoverflow.com/questions/21878974/auto-wrapping-of-labels-via-labeller-label-wrap-in-ggplot2
scale_x_discrete(labels = function(x) wrap_function_label(x))+
theme(axis.title.y=element_blank(),
text = element_text(size = 12, family = "Helvetica Neue"))
#saving the resulting graph
#ggsave(filename = sprintf("./Mean_plots/%s.png", x), plot = p, units = "mm", width = 250, height = (70 + length(levels(factor(melted_means$X2)))*10))
return(p)
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
means_printing <- function(x){
### function to print out a boxplot for any given question. Used in conjuction with means_prepare.
# getting the means table for a given question
means <- means_prepare(x)[[1]]
# melting the means table to use it in plotting
melted_means <- as.data.frame(reshape2::melt(as.matrix(means)))
#getting name of the question
name_of_the_question <- extract_name(x)
#wrap statement to have new lines after a given character
wrap_function_title <- wrap_format(80)
name_of_the_question <- wrap_function_title(name_of_the_question)
#same for dimension names
wrap_function_label <- wrap_format(40)
#plotting
p <- ggplot(melted_means, aes(y = value, x = Var2)) +
ggtitle(name_of_the_question) +
geom_boxplot() +
coord_flip() +
ylab("Distribution of means") +
#http://stackoverflow.com/questions/21878974/auto-wrapping-of-labels-via-labeller-label-wrap-in-ggplot2
scale_x_discrete(labels = function(x) wrap_function_label(x))+
theme(axis.title.y=element_blank(),
text = element_text(size = 14, family = "Helvetica Neue"))
#saving the resulting graph
#ggsave(filename = sprintf("./Mean_plots/%s.png", x), plot = p, units = "mm", width = 250, height = (70 + length(levels(factor(melted_means$X2)))*10))
return(p)
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
loadfonts()
fonts()
questionprint_grouping <- function(x, dataset = overall, grouping, grouping_levels){
### x = name of the question to be printed
### dataset = which dataset should be used to extract data from. Default = overall.
### grouping = grouping variable to be used to display the results. MUST be the same length as the dataset itself.
### grouping_levels = grouping levels to be used to display. Function automatically deletes rows with levels not present in grouping_levels variable.
### returns nothing, prints the plot directly to the window.
z <- question_prepare(x, dataset)
question <- z[[1]]
name_of_the_question <- z[[2]]
wrap_function <- wrap_format(85) #wrap-function to print question correctly
name_of_the_question <- wrap_function(name_of_the_question)
grouping_variable <- factor(grouping, levels = grouping_levels)
question <- question[complete.cases(grouping_variable), ]
grouping_variable <- grouping_variable[complete.cases(grouping_variable)]
questionl <- likert(question, grouping = grouping_variable)
plot(questionl) +
#    ggtitle(name_of_the_question) +
theme(text = element_text(size = 12, family = "Liberation Sans"),
plot.title = element_text(size = 14))
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
means_printing <- function(x){
### function to print out a boxplot for any given question. Used in conjuction with means_prepare.
# getting the means table for a given question
means <- means_prepare(x)[[1]]
# melting the means table to use it in plotting
melted_means <- as.data.frame(reshape2::melt(as.matrix(means)))
#getting name of the question
name_of_the_question <- extract_name(x)
#wrap statement to have new lines after a given character
wrap_function_title <- wrap_format(80)
name_of_the_question <- wrap_function_title(name_of_the_question)
#same for dimension names
wrap_function_label <- wrap_format(40)
#plotting
p <- ggplot(melted_means, aes(y = value, x = Var2)) +
ggtitle(name_of_the_question) +
geom_boxplot() +
coord_flip() +
#ylab("Distribution of means") +
#http://stackoverflow.com/questions/21878974/auto-wrapping-of-labels-via-labeller-label-wrap-in-ggplot2
scale_x_discrete(labels = function(x) wrap_function_label(x))+
theme(axis.title.y=element_blank(),
axis.title.x=element_blank(),
text = element_text(size = 14, family = "Helvetica Neue"))
#saving the resulting graph
#ggsave(filename = sprintf("./Mean_plots/%s.png", x), plot = p, units = "mm", width = 250, height = (70 + length(levels(factor(melted_means$X2)))*10))
return(p)
}
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
rmarkdown::render('./Reports/cqss2015.Rmd',
output_format = "html_document",
output_file =  paste("cqss2015.html", sep=''))
setwd("~/Dropbox/Study/Coursera/Analytics Edge/Week3_logistic_regression")
quality <- read.csv("~/Dropbox/Study/Coursera/Analytics Edge/Week3_logistic_regression/quality.csv", stringsAsFactors=FALSE)
View(quality)
table(quality$PoorCare)
library(caTools)
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.7)
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)
QualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = "binomial")
summary(QualityLog)
predictTrain <- predict(QualityLog, type = "response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
table(qualityTrain$PoorCare, predictTrain > 0.5)
table(qualityTrain$PoorCare, predictTrain > 0.7)
table(qualityTrain$PoorCare, predictTrain > 0.2)
library(ROCR)
predictTest <- predict(QualityLog, type="response", newdata=qualityTest)
ROCRpredTest <-  prediction(predictTest, qualityTest$PoorCare)
source("functions.R")
install.packages("likert")
source("functions.R")
install.packages("tidyr")
source("functions.R")
install.packages("rworldmap")
source("functions.R")
install.packages("countrycode")
source("functions.R")
install.packages("classInt")
source("functions.R")
source("functions.R")
source("functions.R")
z <- prepare_university("J.2", dataset)
View(z)
View(z)
View(z)
z <- dataset
z <- z[!is.na(z$J.2.What.do.you.think.is.the.most.important.issue.course.representatives.should.address._Open.Ended.Response),]
f <- z %>%
select(A.2.name.of.Erasmus.Mundus.master.course.) %>%
group_by(A.2.name.of.Erasmus.Mundus.master.course.) %>%
summarise(respondents = n()) %>%
filter(respondents >=10) %>%
arrange(desc(respondents))
View(f)
rmarkdown::render('./Reports/rediet_j2.Rmd',
output_format = "html_document",
output_file =  "rediet_j2.html",
output_dir = './Reports')
X <- matrix(data = c(1,0,1,0,1,0,0,1,0,1,0,1), nrow = 6, ncol = 2)
View(X)
View(X)
y <- matrix(data = c(-1,-1,1,1,-1,-2,1,2,-2,-1,2,1), nrow = 6, ncol 2)
y <- matrix(data = c(-1,-1,1,1,-1,-2,1,2,-2,-1,2,1), nrow = 6, ncol =2)
y
X <- matrix(data = c(1,1,1,0,0,0,0,0,0,1,1,1), nrow = 6, ncol = 2)
X
y <- matrix(data = c(-1,-1,-2, 1,1,2,-1,-2,-1,1,2,1), nrow = 6, ncol =2)
y
(t(X)*X)^(-1)*X*y
?t
t(X)
t(X)*X
dim(X)
dim(t(X))
t(X)*y
y*t(X)
X*X
X.*X
(t(X)%*%X)^(-1)%*%t(X)%*%y
ginv((t(X)%*%X))%*%t(X)%*%y
solve((t(X)%*%X))%*%t(X)%*%y
install.packages(c("DBI", "digest", "knitr", "maps", "R6", "Rcpp", "spam", "stringr", "tibble", "tidyr"))
