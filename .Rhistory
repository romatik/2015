L.3.a = {
first_heading <- '##Field experience.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.4 = {
first_heading <- '##First supervisor.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.5 = {
first_heading <- '##Second supervisor.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.6 = {
first_heading <- '##Personal development.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
}
)
#logical flag to see if there is any data on a given question.
#It will evaluate to TRUE if there is any error or will return the value otherwise.
try_flag <- tryCatch(question_prepare(question, course_dataset), error = function(err) return(TRUE))
if(!is.logical(try_flag)){ #checking if try_flag is logical. If it is, then do nothing. Otherwise print out the information about the question.
cat(sprintf("\n%s\n", text_data))
cat(sprintf("\n%s\n\n", first_heading))
#cat(intro_text)
#prtinting out the question
print(questionprint(question, dataset = course_dataset, save = FALSE))
#cat(graph_text)
cat("\n")
not_print <- c("N", "O", "P", "Q") #not printing comparative tables for questions on specific university
if (!(substr(question, 1, 1) %in% not_print)) {
#preparing and printing table
df <- comparative_df(question, course_dataset)
z <- xtable(df, caption = sprintf("Summary statistics"), digits = c(0,0,2,2,2,2,2,2), type = "html")
align(z) <- "|p{5cm}|cc|c|cccc|"
print(z, NA.string = "NA", sanitize.text.function = function(x) x)
}
cat("\n")
#cat(table_text)
}
}
for (i in 1:3){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
try_flag <- tryCatch(comparative_df(question, course_dataset), error = function(err) return(TRUE))
report_question <- function(question, course_dataset, text_data = NULL){
## Function to print out the question in the individual report.
## question = string, containing the question to be printed.
## course_dataset = course dataset to produce graphs and tables.
switch(question,
B.1.1 = {
first_heading <- '###Consortia\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
B.1.3 = {
first_heading <- '###Consortia\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
B.2.1 = {
first_heading <- '###Consortia\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
B.2.2 = {
first_heading <- '###Consortia\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
C.1 = {
first_heading <- '###Consortia\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.2.a = {
first_heading <- '##Internship experience.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.3.a = {
first_heading <- '##Field experience.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.4 = {
first_heading <- '##First supervisor.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.5 = {
first_heading <- '##Second supervisor.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
},
L.6 = {
first_heading <- '##Personal development.\n'
intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\n'
graph_text <- 'Some supporting text explaining the graph and highlighting some of the issues. Should be individual for each course.\n'
table_text <- 'Some supporting about the table and highlighting some of the issues. Should be individual for each course.\n'
}
)
#logical flag to see if there is any data on a given question.
#It will evaluate to TRUE if there is any error or will return the value otherwise.
try_flag <- tryCatch(comparative_df(question, course_dataset), error = function(err) return(TRUE))
if(!is.logical(try_flag)){ #checking if try_flag is logical. If it is, then do nothing. Otherwise print out the information about the question.
cat(sprintf("\n%s\n", text_data))
cat(sprintf("\n%s\n\n", first_heading))
#cat(intro_text)
#prtinting out the question
print(questionprint(question, dataset = course_dataset, save = FALSE))
#cat(graph_text)
cat("\n")
not_print <- c("N", "O", "P", "Q") #not printing comparative tables for questions on specific university
if (!(substr(question, 1, 1) %in% not_print)) {
#preparing and printing table
df <- comparative_df(question, course_dataset)
z <- xtable(df, caption = sprintf("Summary statistics"), digits = c(0,0,2,2,2,2,2,2), type = "html")
align(z) <- "|p{5cm}|cc|c|cccc|"
print(z, NA.string = "NA", sanitize.text.function = function(x) x)
}
cat("\n")
#cat(table_text)
}
}
source("functions.R")
for (i in 1:3){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
z <- prepare_university(x, course_dataset)
View(z)
z %>% group_by(University.1) %>% summarise_each(funs(f2))
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2))
View(k)
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2)) %>% group_by(University.1) %>% summarise(sum(f2))
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2)) %>% group_by(University.1) %>% summarise()
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2)) %>% group_by(University.1) %>% summarise(sum())
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2)) %>% group_by(University.1) %>% summarise(sum(x > 10))
View(k)
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2))
k
View(k)
k > 10
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2, respondents = n())) %>% filter(respondents >=1)
k <- z %>% group_by(University.1) %>% summarise_each(funs(f2))
counts <- z %>% group_by(University.1) %>% summarise_each(funs(f2))
row.names(counts) <- counts$University.1
counts$University.1 <- NULL
View(counts)
counts$rows <- rowsum(counts > 10)
counts$rows <- rowSums(counts > 10)
View(counts)
rownames(counts)
rownames(counts) == "Aalborg University, Denmark"
n <- counts[rownames(counts) == university_names[i],rows]
n <- counts[rownames(counts) == university_names[i],]$rows
rownames(counts) == university_names[i]
i <- 1
n <- counts[rownames(counts) == university_names[i],]$rows
n
rownames(counts) == university_names[i]
university_names <- sort(as.character(unique(z$University.1)))
counts <- z %>% group_by(University.1) %>% summarise_each(funs(f2))
row.names(counts) <- counts$University.1
counts$University.1 <- NULL
counts$rows <- rowSums(counts > 10)
slice <- z[z$University.1 == university_names[i], ]
n <- counts[rownames(counts) == university_names[i],]
View(n)
n <- counts[rownames(counts) == university_names[i],"rows"]
View(n)
n <- as.numeric(counts[rownames(counts) == university_names[i],"rows"])
source("functions.R")
for (i in 1:3){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
figure_height("N.4.1", slice)
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
text_data <- read.csv("./Reports/text_data.csv", encoding = "UTF-8")
today_date <- as.character(format(Sys.Date(), "%d %b %Y"))
#http://reed.edu/data-at-reed/software/R/markdown_multiple_reports.html
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
text_data <- read.csv("./Reports/text_data.csv", encoding = "UTF-8")
today_date <- as.character(format(Sys.Date(), "%d %b %Y"))
#http://reed.edu/data-at-reed/software/R/markdown_multiple_reports.html
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
library(plyr)
library(extrafont)
#http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html
loadfonts()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.16/bin/gswin64c.exe")
source("functions.R")
text_data <- read.csv("./Reports/text_data.csv", encoding = "UTF-8")
today_date <- as.character(format(Sys.Date(), "%d %b %Y"))
#http://reed.edu/data-at-reed/software/R/markdown_multiple_reports.html
for (i in 41:41){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
for (i in 1:1){
course_dataset <- dataset[dataset$A.2.name.of.Erasmus.Mundus.master.course. == tenormore$Course[i],]
text_dataset <- text_data[text_data$Course == as.character(tenormore$Course)[i],]
rmarkdown::render('./Reports/report_script.Rmd',  # file 2
output_format = "pdf_document",
output_file =  paste(as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''),
output_dir = './Reports/courses')
#embed_fonts(paste("report_", as.character(tenormore$Course[i]), '_', Sys.Date(), ".pdf", sep=''))
}
source("functions.R")
dataset <- read.csv("../Media/2015/Master_tables/bigtable.csv", na.strings = c("", " ", "No answer", "N/A", "NA", "Other (please specify)"), header = TRUE)
dataset$X <- NULL
dataset$B.2.2.a.If.you.feel.comfortable.describe.any.inappropriate.conduct.or.sexual.harassment.issues.you.have.witnessed.or.have.been.the.subject.of.and.the.support.you.have.received.The.answers.to.this.question.will.not.be.shared.with.Erasmus.Mundus.course._Open.Ended.Response <- NULL
### ordered levels that were used in the survey
likert_levels <- c("Very unsatisfied", "Somewhat unsatisfied", "Somewhat satisfied", "Very satisfied")
agree_levels <- c("Disagree", "Somewhat disagree", "Somewhat agree", "Agree")
### questions that need to be printed out
questions <- c('B.1.1', 'B.1.3', 'B.2.1', 'B.2.2', 'C.1', #overall program satisfaction
"L.4", "L.5", "L.6", 'L.3.a', 'L.2.a', #internship/field experience
"N.1.1", "N.1.3", "N.2.1", "N.2.2", "N.3.1", "N.4.1", #satisfaction in first university
"O.1.1", "O.1.3", "O.2.1", "O.2.2", "O.3.1", "O.4.1", #satisfaction in second university
"P.1.1", "P.1.3", "P.2.1", "P.2.2", "P.3.1", "P.4.1", #satisfaction in third university
"Q.1.1", "Q.1.3", "Q.2.1", "Q.2.2", "Q.3.1", "Q.4.1") #satisfaction in fourth university
### finding out courses with 10 or more respondents in the dataset
tenormore <- dataset %>%
select(A.2.name.of.Erasmus.Mundus.master.course.) %>%
group_by(A.2.name.of.Erasmus.Mundus.master.course.) %>%
summarise(respondents = n()) %>%
filter(respondents >= 10)
colnames(tenormore) <- c("Course", "Respondents")
z <- prepare_university("N.3.2", dataset)
View(z)
View(dataset)
View(z)
prepare_university <- function(x, course_dataset){
# function to prepare a dataset for future use
# x = name of the question
# course_dataset = dataset that needs to be prepared
# returns a dataset:
# universities with 10 or more respondents and answers to questions by respondents
questions_uni <- c("N.", "O.", "P.", "Q.") #first letters for questions about specific universities
x <- substr(x, 3, 5) #updating x to use it in a function. x in the beginning is used to make calls to functions consistent
#creating four datasets to merge them leter. Name of the university is used as an ID.
first_university <- course_dataset %>%
select(RespondentID_,
A.2.name.of.Erasmus.Mundus.master.course.,
University.1,
starts_with(paste0(questions_uni[1], x)))
second_university <- course_dataset %>%
select(RespondentID_,
A.2.name.of.Erasmus.Mundus.master.course.,
University.1,
starts_with(paste0(questions_uni[2], x)))
third_university <- course_dataset %>%
select(RespondentID_,
A.2.name.of.Erasmus.Mundus.master.course.,
University.1,
starts_with(paste0(questions_uni[3], x)))
fourth_university <- course_dataset %>%
select(RespondentID_,
A.2.name.of.Erasmus.Mundus.master.course.,
University.1,
starts_with(paste0(questions_uni[4], x)))
#since questions are always the same, binding four datasets together
z <- rbind(first_university,
setNames(second_university, names(first_university)),
setNames(third_university, names(first_university)),
setNames(fourth_university, names(first_university)))
names(z) <- gsub("the.first", "this", names(z)) #substituting "the.first" to "this" to make it gramatically correct
z <- z[!is.na(z$University.1),] #removing empty lines
#finding out names of universities with 10 or more respondents
university_names <- z %>%
select(University.1) %>%
group_by(University.1) %>%
summarise(respondents = n()) %>%
filter(respondents >= 10)
#returning only rows with 10 or more respondents
#  z <- z[z$University.1 %in% as.character(university_names$University.1),]
return(z)
}
z <- prepare_university("N.3.2", dataset)
View(z)
z <- z[!is.na(z$N.3.2.What.recommendations.would.you.give.to.build.or.improve.student.feedback.channels.at.this.university._Open.Ended.Response),]
f <- z %>% select(A.2.name.of.Erasmus.Mundus.master.course.) %>% summarise(respondents = n()) %>% filter(respondents >=10)
View(f)
f <- z %>% select(A.2.name.of.Erasmus.Mundus.master.course.) %>% group_by(A.2.name.of.Erasmus.Mundus.master.course.) %>% summarise(respondents = n()) %>% filter(respondents >=10)
View(f)
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "pdf_document",
output_file =  "rediet.pdf",
output_dir = './Reports')
View(f)
f <- z %>%
select(A.2.name.of.Erasmus.Mundus.master.course.) %>%
group_by(A.2.name.of.Erasmus.Mundus.master.course.) %>%
summarise(respondents = n()) %>%
filter(respondents >=10)
View(f)
z <- prepare_university("N.3.2", dataset)
z <- z[!is.na(z$N.3.2.What.recommendations.would.you.give.to.build.or.improve.student.feedback.channels.at.this.university._Open.Ended.Response),]
f <- z %>%
select(A.2.name.of.Erasmus.Mundus.master.course.) %>%
group_by(A.2.name.of.Erasmus.Mundus.master.course.) %>%
summarise(respondents = n()) %>%
filter(respondents >=10)
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "pdf_document",
output_file =  "rediet.pdf",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "pdf_document",
output_file =  "rediet.pdf",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
table(respondents$A.4.Have.you.already.graduated.from.EM.course._Response)
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
rmarkdown::render('./Reports/rediet.Rmd',  # file 2
output_format = "html_document",
output_file =  "rediet.html",
output_dir = './Reports')
source("functions.R")
text_data <- read.csv("./Reports/text_data.csv", encoding = "UTF-8")
View(text_data)
text <- text_data %>% select(starts_with("X"))
View(text)
sapply(gregexpr("[[:alpha:]]+", text), function(x) sum(x > 0))
apply(X = text, MARGIN = 2, gregexpr("[[:alpha:]]+"))
apply(X = text, MARGIN = 2, function(x) gregexpr("[[:alpha:]]+", x))
apply(X = text, MARGIN = 2, function(x) gregexpr("[[:alpha:]]+", x) + 1)
apply(X = text, MARGIN = 2, function(x) gregexpr("[[:alpha:]]+", x) + 1L)
?gregexpr
?stringr
library(stringi)
stri_count(text, regex = "\\S+")
?stri_count
stri_count(text[,1], regex = "\\S+")
z <- apply(text, 2, function(x) stri_count(x, regex = "\\S+"))
z <- as.data.frame(apply(text, 2, function(x) stri_count(x, regex = "\\S+")))
View(z)
sum(rowSums(z))
sum(rowSums(z))/78
sum(rowSums(z))/ncol(text)/nrow(text)
sum(rowSums(z))/22
View(text)
View(z)
